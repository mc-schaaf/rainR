% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/max_ad2.R
\name{max_ad2}
\alias{max_ad2}
\title{Maximum Absolute Deviation}
\usage{
max_ad2(x_vector, y_vector, slope, intercept)
}
\arguments{
\item{x_vector}{vector of the x-coordinates of the executed trajectory}

\item{y_vector}{vector of the y-coordinates of the executed trajectory}

\item{slope}{slope of the ideal trajectory}

\item{intercept}{intercept of the ideal trajectory}
}
\value{
List containing 3 vectors. First, ad will be the absolute distances.
Second, direction (1 = above the line, 0 = on the line, -1 = below the line).
Third, linecoords (list with the vectors x and y for x0 and y0).
}
\description{
This function computes the absolute (Euclidean) distance of a
point P (with the 2D-coordinates px and py) and a line, defined by slope a
and intercept b. The arguments px and py may be scalars or vectors of the
same length.
Translation of the script given by Pfister et al. (2014) at
https://doi.org/10.1016/j.cognition.2014.07.012
}
\details{
The Euclidean distance d between P and the line defined by a and b can
be computed as a function of the x coordinate of a point G(x,y) on the
line (general case). To avoid confusion, I will denote px and py as p1
and p2, respectively.

   d(x) = sqrt( (p1-x)^2 + (p2-y)^2 )       | ()^2

   d(x)^2 = (p1-x)^2 + (p2-y)^2             | solve brackets

   d(x)^2 = p1^2 - 2*p1*x + x^2 + p2^2 - 2*p2*a*x - 2*p2*b + 2*a*x*b + a^2*x^2 + b^2

   Rearranging to bring all terms including x's to the front...

   d(x)^2 = (a^2+1)*x^2 + (2*a*b - 2*p1 - 2*p2*a)*x + p1^2 + p2^2 - 2*p2*b + b^2

   Deriving this latter function helps to find the minimum
   (absolute) distance between P and the line (note that none
   of the terms in the second line of the above equation contains
   any x's):

   d(x)^2' = 2*(a^2+1)*x + 2*(a*b - p1 - p2*a)

   d(x)^2' =(!)= 0

The x coordinate corresponding to the global minimum is denoted as x0:

   x0 = (p1 + p2*a - a*b) / (a^2+1)
}
